
task getDeviceStatus(description: 'Retrieve device status.') << {
  remote {
    println "Expected hostname: ${project.hostConfig.hostname}"
    println "Expected mac: ${project.hostConfig.mac}"
    if (fail("/bin/hostname | grep ${project.hostConfig.hostname}")) {
      println "HOSTNAME MISMTACH!"
    }
    if (fail("/sbin/ifconfig | grep ${project.hostConfig.mac}")) {
      println "MAC MISMTACH!"
    }
  }
}

task getDeviceLogs(description: 'Retrieve device log.') << {
  remote {
    ['device.log', 'daemon.log', 'syslog', 'messages', 'dmesg', 'debug', 'kern.log', 'auth.log'].each { log ->
      scp {
        from { remoteFile "/var/log/${log}" }
        into { localFile "${buildDir}/${project.hostConfig.hostname}-${log}" }
      }
    }
  }
}

task getDeviceCode(description: 'Retrieve device code.') << {
  remote {
    ['device.py', 'status.py'].each { code ->
      scp {
        from { remoteFile "/home/pi/scripts/${code}" }
        into { localFile "${buildDir}/${project.hostConfig.hostname}-${code}" }
      }
    }
  }
}

task deleteDeviceLog(description: 'Delete device log.') << {
  remote {
    exec 'sudo rm -rf /var/log/device.log'
    exec 'sudo service device restart'
  }
}
