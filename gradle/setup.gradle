
task updateSystem(description: 'Update to latest version of OS.') << {
  remote {
    exec 'sudo apt-get -yq update'
    exec 'sudo apt-get -yq upgrade'
  }
}

task installTools(description: 'Install common tools.') << {
  remote {
    exec 'sudo apt-get -yq install nano git subversion bzr dos2unix iceweasel curl wget midori libusb-dev'
  }
}

installTools.mustRunAfter updateSystem

task installI2C(description: 'Install I2C tools.') << {
  remote {
    String check  = 'sudo grep -q -E "^(device_tree_param|dtparam)=([^,]*,)*i2c(_arm)?(=(on|true|yes|1))?(,.*)?$" /boot/config.txt'
    String update = 'sudo sed /boot/config.txt -i -r -e "s/^#?((device_tree_param|dtparam)=([^,]*,)*i2c(_arm)?)(=[^,]*)?/\1=on/"' 
    String append = /sudo sh -c 'printf "dtparam=i2c_arm=on\n" >> \/boot\/config.txt'/
    if (fail(check)) {
      exec(update)
      if (fail(check)) {
        exec(append)
      }
    }
    exec 'sudo apt-get -yq install i2c-tools'
    if (!(remoteFile('/etc/modules').text.readLines().find { it.startsWith('i2c-bcm2708') })) {
      exec(/sudo sh -c "echo 'i2c-bcm2708' >> \/etc\/modules"/)
    }
    if (!(remoteFile('/etc/modules').text.readLines().find { it.startsWith('i2c-dev') })) {
      exec(/sudo sh -c "echo 'i2c-dev' >> \/etc\/modules"/)
    }
  }
}

installI2C.mustRunAfter updateSystem

task installPythonLibs(description: 'Install common Python libraries.') << {
  remote {
    exec 'sudo apt-get -yq install python-setuptools python-smbus python-yaml python-picamera python-psutil'
    if (fail('sudo python -c "import usb"')) {
      exec 'sudo rm -rf /home/pi/pyusb-1.0.0b1'
      exec 'wget https://github.com/walac/pyusb/archive/1.0.0b1.tar.gz'
      exec 'tar -xf 1.0.0b1.tar.gz'
      exec 'cd /home/pi/pyusb-1.0.0b1 ; sudo python setup.py install'
    } else {
      println "pyusb is already installed!"
    }
  }
}

installPythonLibs.mustRunAfter updateSystem

task installNfc(description: 'Install common NFC libraries.') << {
  remote {

    exec 'sudo apt-get -yq install libusb-dev'

    // Install libnfc.
    if (fail('test -f /usr/lib/libnfc.so')) {
      exec 'sudo rm -rf /home/pi/libnfc-1.7.1'
      exec 'wget http://dl.bintray.com/nfc-tools/sources/libnfc-1.7.1.tar.bz2'
      exec 'tar -xf libnfc-1.7.1.tar.bz2'
      prefix('cd /home/pi/libnfc-1.7.1 ; sudo ') {
        exec './configure --prefix=/usr --sysconfdir=/etc'
        exec 'make'
        exec 'make install'
      }
      exec 'sudo cp /home/pi/libnfc-1.7.1/contrib/udev/42-pn53x.rules /lib/udev/rules.d/'
      if (fail('test -f /etc/modprobe.d/blacklist-libnfc.conf') || !remoteFile('/etc/modprobe.d/blacklist-libnfc.conf').text.readLines().find { it.startsWith('blacklist pn533') }) {
        exec(/sudo sh -c "echo 'blacklist pn533' >> \/etc\/modprobe.d\/blacklist-libnfc.conf"/)
      }
      if (fail('test -f /etc/modprobe.d/blacklist-libnfc.conf') || !remoteFile('/etc/modprobe.d/blacklist-libnfc.conf').text.readLines().find { it.startsWith('blacklist nfc') }) {
        exec(/sudo sh -c "echo 'blacklist nfc' >> \/etc\/modprobe.d\/blacklist-libnfc.conf"/)
      }
    } else {
      println "libnfc is already installed"
    }

    // Install nfcutils.
    if (fail('which lsnfc')) {
      exec 'sudo rm -rf /home/pi/nfcutils-0.3.2'
      exec 'wget https://nfc-tools.googlecode.com/files/nfcutils-0.3.2.tar.gz'
      exec 'tar -xf nfcutils-0.3.2.tar.gz'
      prefix('cd /home/pi/nfcutils-0.3.2 ; sudo ') {
        exec './configure --prefix=/usr --sysconfdir=/etc'
        exec 'make'
        exec 'make install'
      }
    } else {
      println "nfcutils is already installed"
    }
  
    // Install nfc-eventd.  
    if (fail('which nfc-eventd')) {
      exec 'sudo rm -rf /home/pi/nfc-eventd-0.1.7'
      exec 'wget https://nfc-tools.googlecode.com/files/nfc-eventd-0.1.7.tar.gz'
      exec 'tar -xf nfc-eventd-0.1.7.tar.gz'
      prefix('cd /home/pi/nfc-eventd-0.1.7 ; sudo ') {
        exec './configure --prefix=/usr --sysconfdir=/etc --enable-debug'
        exec 'make'
        exec 'make install'
      }
    } else {
      println "nfc-eventd is already installed"
    }

    // Install nfcpy.    
    if (fail('sudo python -c "import nfc"')) {
      exec 'sudo rm -rf /home/pi/nfcpy'
      exec 'bzr branch lp:nfcpy/0.9'
      exec 'mv 0.9 nfcpy'
      remoteFile('/home/pi/nfcpy/setup.py').text ='''
        #!/usr/bin/env python
      
        from distutils.core import setup
    	
        import nfc
  
        setup(
          name='nfc',
          version=nfc.__version__,
          description='Python NFC access module',
          url='http://nfcpy.org',
          packages=['nfc', 'nfc.dev', 'nfc.handover', 'nfc.llcp', 'nfc.ndef', 'nfc.snep', 'nfc.tag']
        )
      '''
      exec 'cd /home/pi/nfcpy ; sudo python setup.py install'
    } else {
      println "nfcpy is already installed"
    }

  }
}

installNfc.mustRunAfter([ updateSystem, installTools, installPythonLibs ])

task installPiGlow(description: 'Install PiGlow libraries.') << {
  remote {
    if (fail('sudo python -c "import piglow"')) {
      exec 'sudo rm -rf /home/pi/PiGlow'
      exec 'git clone https://github.com/Boeeerb/PiGlow.git'
      exec 'cd /home/pi/PiGlow ; sudo python setup.py install'
    }
  }
}

installPiGlow.mustRunAfter([ updateSystem, installTools, installPythonLibs ])

task installGrovePi(description: 'Install GrovePi libraries.') << {
  remote {
    if (fail('sudo python -c "import grovepi"')) {
      exec 'sudo rm -rf /home/pi/GrovePi'
      exec 'git clone -q https://github.com/DexterInd/GrovePi.git'
      exec 'cd /home/pi/GrovePi/Software/Python ; sudo python setup.py install'
    }
  }
}

installGrovePi.mustRunAfter([ updateSystem, installTools, installPythonLibs ])

task configureWifi(description: 'Configure WiFi networks.') << {
  remote {
    remoteFile('/tmp/interfaces').text = """
      auto lo
      
      iface lo inet loopback
      iface eth0 inet dhcp
      
      allow-hotplug wlan0
      
      iface wlan0 inet dhcp
      wpa-ssid ${latcraftIOTNetworkName}
      wpa-psk ${latcraftIOTNetworkPass}
    """
    exec 'sudo cp /tmp/interfaces /etc/network/interfaces'
    exec 'sudo systemctl daemon-reload'
  }
}

task copyCode(description: 'Copy configuration and code.') << {
  remote {
    exec "rm -rf /home/pi/config"
    exec "mkdir -p /home/pi/scripts"
    exec "rm -rf /home/pi/scripts/*"
    scp {
      from { localDir "scripts" }
      into { remoteDir "/home/pi/scripts" }
    }
  }
}

task configureServices(description: 'Configure WiFi networks.') << {
  remote {

    String configFile = "device_${project.hostConfig.type}.yaml"

    scp {
      from { localFile "config/${configFile}" }
      into { remoteDir "/home/pi/scripts" }
    }
    exec "sudo ln -f /home/pi/scripts/${configFile} /etc/device.yaml"

    exec 'sudo cp /home/pi/scripts/device_service.sh /etc/init.d/device'
    exec 'sudo chmod 755 /etc/init.d/device'
    exec 'sudo chmod 755 /home/pi/scripts/device_service.sh'
    exec 'sudo chmod 755 /home/pi/scripts/device.py'
    exec 'sudo update-rc.d device defaults'

    exec 'sudo cp /home/pi/scripts/status_service.sh /etc/init.d/status'
    exec 'sudo chmod 755 /etc/init.d/status'
    exec 'sudo chmod 755 /home/pi/scripts/status_service.sh'
    exec 'sudo chmod 755 /home/pi/scripts/status.py'
    exec 'sudo update-rc.d status defaults'

  }
}

configureServices.mustRunAfter copyCode

task setHostname(description: 'Set hostname.') << {
  remote {
    exec "sudo sed /etc/hosts -i -r -e \"s/^127\\.0\\.1\\.1.*\$/127.0.1.1\\t${project.hostConfig.hostname}/\""
    exec "sudo sh -c 'echo ${project.hostConfig.hostname} > /etc/hostname'"
    exec "sudo /etc/init.d/hostname.sh"
  }
}

task initNode(dependsOn: [ setHostname, updateSystem, installTools, installI2C, installPythonLibs, installNfc, installGrovePi, installPiGlow, configureWifi, copyCode, configureServices ]) 
task configureNode(dependsOn: [ copyCode, configureServices ]) 
